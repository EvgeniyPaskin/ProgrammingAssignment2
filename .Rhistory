hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
tail(hw1_dataб2)
tail(hw1_data,2)
hw1_data[47]
hw1_data[47,]
is.na(hw1_data$Ozone)
sum(is.na(hw1_data$Ozone))
summary(hw1_data)
mean(hw1_data$Ozone, na.rm = TRUE)
x<- hw1_data[hw1_data$Ozone > 31,]
mean(x$Solar.R)
x<- hw1_data[hw1_data$Ozone > 31 & hw1_data$Temp > 91,]
mean(x$Solar.R)
mean(x$Solar.R, na.omit=TRUE)
View(x)
mean(x$Solar.R, na.rm=TRUE)
x<- hw1_data[hw1_data$Ozone > 31 & hw1_data$Temp > 90,]
mean(x$Solar.R, na.rm=TRUE)
mean(hw1_data$Temp[Month=0] )
mean(hw1_data$Temp[Month=0,] )
mean(hw1_data$Temp[Month=6] )
mean(hw1_data$Temp[hw1_data$Month=6] )
mean(hw1_data$Temp[hw1_data$Month==6] )
max(hw1_data$Ozone[hw1_data$Month==5] )
max(hw1_data$Ozone[hw1_data$Month==5], na.rm=TRUE )
x <- 4L
class(x)
x <- c(4, TRUE)
class(x)
x <- list(2, "a", "b", TRUE).
x <- list(2, "a", "b", TRUE)
class(x[[1]])
x <- 1:4 vector y <- 2.
x <- 1:4 vector y <- 2.
x <- 1:4 y <- 2
x <- 1:4
y <- 2
x+y
class(x+y)
A<-hw1_data
head(A,2)
x <- list(2, "a", "b", TRUE)
class(x[[2]])
x[[2]]
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10, 100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- wdir()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", "folder1", "folder2")
file.path("folder1", "folder2")
?dir.create
dir.create(filepath("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
unlink("testdir2", recursive = ЕКГУ)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", unlink=TRUE)
unlink("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1:20)
seq(1, 20)
seq(0, 10, by = 0.5)
seq(5, 10, length=30)
myseq<-seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
lenth(my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
x<-c(0.5,55,-10,6)
c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect>6
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Evgeniy")
my_name
paste(my_char, collapse=" ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(c(1:3), c("X","Y","Z"), sep="" )
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y, z), 100).
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[X>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <-
| c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 with c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<c(4,5)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <-matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10 <= 10
5!=7
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE).
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints > 7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(head(1), c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit
submit
submit()
submit()
telegram("test")
submit()
submit()
submit()
submit()
mad_libs(place="PLACE", adjective = "ADJ", noun = "NNN")
submit()
"I" %p% "love" %p% "R!"
swirl()
Sys.Date()
iris
head(iris)
class(iris$Species)
tapply(iris, Species, mean)
tapply(iris, iris$Species, mean)
DT <- as.data.frame(iris)
tapply(DT, DT$Species, mean)
tapply(DT$Sepal.Length, DT$Species, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
class(apply(iris[, 1:4], 2, mean))
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
aaa<-tapply(mtcars$hp, mtcars$cyl, mean)
aaa[3]-aaa[1]
debug(ls)
ls
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
stop
